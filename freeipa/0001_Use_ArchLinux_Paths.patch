--- a/init/systemd/ipa_memcached.service
+++ b/init/systemd/ipa_memcached.service
@@ -4,7 +4,7 @@
 
 [Service]
 Type=forking
-EnvironmentFile=/etc/sysconfig/ipa_memcached
+EnvironmentFile=/etc/conf.d/ipa_memcached.conf
 PIDFile=/var/run/ipa_memcached/ipa_memcached.pid
 ExecStart=/usr/bin/memcached -d -s $SOCKET_PATH -u $USER -m $CACHESIZE -c $MAXCONN -P /var/run/ipa_memcached/ipa_memcached.pid $OPTIONS
 
--- a/install/conf/ca_renewal
+++ b/install/conf/ca_renewal
@@ -3,4 +3,4 @@
 id=dogtag-ipa-retrieve-agent-submit
 ca_is_default=0
 ca_type=EXTERNAL
-ca_external_helper=/usr/libexec/certmonger/dogtag-ipa-retrieve-agent-submit
+ca_external_helper=/usr/lib/certmonger/certmonger/dogtag-ipa-retrieve-agent-submit
--- a/install/conf/ipa.conf
+++ b/install/conf/ipa.conf
@@ -36,7 +36,7 @@
 FileETag None
 
 # FIXME: WSGISocketPrefix is a server-scope directive.  The mod_wsgi package
-# should really be fixed by adding this its /etc/httpd/conf.d/wsgi.conf:
+# should really be fixed by adding this its /etc/httpd/conf/extra/wsgi.conf:
 WSGISocketPrefix /run/httpd/wsgi
 
 
--- a/install/tools/ipa-upgradeconfig
+++ b/install/tools/ipa-upgradeconfig
@@ -111,7 +111,7 @@
 
 def find_hostname():
     """Find the hostname currently configured in ipa-rewrite.conf"""
-    filename="/etc/httpd/conf.d/ipa-rewrite.conf"
+    filename="/etc/httpd/conf/extra/ipa-rewrite.conf"
 
     if not ipautil.file_exists(filename):
         return None
@@ -134,7 +134,7 @@
 
     Returns True if autoredirect is enabled, False otherwise
     """
-    filename = '/etc/httpd/conf.d/ipa-rewrite.conf'
+    filename = '/etc/httpd/conf/extra/ipa-rewrite.conf'
     if os.path.exists(filename):
         pattern = "^RewriteRule \^/\$ https://%s/ipa/ui \[L,NC,R=301\]" % fqdn
         p = re.compile(pattern)
@@ -904,9 +904,9 @@
     certmap_dir = dsinstance.config_dirname(
         dsinstance.realm_to_serverid(api.env.realm))
 
-    upgrade(sub_dict, "/etc/httpd/conf.d/ipa.conf", ipautil.SHARE_DIR + "ipa.conf")
-    upgrade(sub_dict, "/etc/httpd/conf.d/ipa-rewrite.conf", ipautil.SHARE_DIR + "ipa-rewrite.conf")
-    upgrade(sub_dict, "/etc/httpd/conf.d/ipa-pki-proxy.conf", ipautil.SHARE_DIR + "ipa-pki-proxy.conf", add=True)
+    upgrade(sub_dict, "/etc/httpd/conf/extra/ipa.conf", ipautil.SHARE_DIR + "ipa.conf")
+    upgrade(sub_dict, "/etc/httpd/conf/extra/ipa-rewrite.conf", ipautil.SHARE_DIR + "ipa-rewrite.conf")
+    upgrade(sub_dict, "/etc/httpd/conf/extra/ipa-pki-proxy.conf", ipautil.SHARE_DIR + "ipa-pki-proxy.conf", add=True)
     upgrade(sub_dict, os.path.join(certmap_dir, "certmap.conf"),
         os.path.join(ipautil.SHARE_DIR, "certmap.conf.template"))
     upgrade_pki(ca, fstore)
--- a/install/tools/man/ipa-upgradeconfig.8
+++ b/install/tools/man/ipa-upgradeconfig.8
@@ -24,7 +24,7 @@
 .SH "DESCRIPTION"
 A tool to update the IPA Apache configuration during an upgrade.
 
-It examines the VERSION value in the head of \fI/etc/httpd/conf.d/ipa.conf\fR and \fI/etc/httpd/conf.d/ipa\-rewrite.conf\fR and compares this with the templates. If an update is needed then new files are written.
+It examines the VERSION value in the head of \fI/etc/httpd/conf/extra/ipa.conf\fR and \fI/etc/httpd/conf/extra/ipa\-rewrite.conf\fR and compares this with the templates. If an update is needed then new files are written.
 
 It also will convert a CA configured to be accessible via ports 9443, 9444, 9445 and 9446 to be proxied by the IPA web server on ports 80 and 443.
 
--- a/ipa-client/ipaclient/ntpconf.py
+++ b/ipa-client/ipaclient/ntpconf.py
@@ -99,7 +99,7 @@
 def config_ntp(server_fqdn, fstore = None, sysstore = None):
     path_step_tickers = "/etc/ntp/step-tickers"
     path_ntp_conf = "/etc/ntp.conf"
-    path_ntp_sysconfig = "/etc/sysconfig/ntpd"
+    path_ntp_sysconfig = "/etc/conf.d/ntpd.conf"
     sub_dict = { }
     sub_dict["SERVER"] = server_fqdn
 
--- a/ipa-client/ipa-install/ipa-client-automount
+++ b/ipa-client/ipa-install/ipa-client-automount
@@ -39,10 +39,10 @@
 from ipapython.dn import DN
 from ipapython import services as ipaservices
 
-AUTOFS_CONF = '/etc/sysconfig/autofs'
+AUTOFS_CONF = '/etc/conf.d/autofs'
 NSSWITCH_CONF = '/etc/nsswitch.conf'
 AUTOFS_LDAP_AUTH = '/etc/autofs_ldap_auth.conf'
-NFS_CONF = '/etc/sysconfig/nfs'
+NFS_CONF = '/etc/conf.d/nfs'
 IDMAPD_CONF = '/etc/idmapd.conf'
 
 def parse_options():
--- a/ipa-client/ipa-install/ipa-client-install
+++ b/ipa-client/ipa-install/ipa-client-install
@@ -602,7 +602,7 @@
             # to this version but not unenrolled/enrolled again
             # In such case it is OK to fail
             restored = fstore.restore_file("/etc/ntp.conf")
-            restored |= fstore.restore_file("/etc/sysconfig/ntpd")
+            restored |= fstore.restore_file("/etc/conf.d/ntpd.conf")
             if ntp_step_tickers:
                restored |= fstore.restore_file("/etc/ntp/step-tickers")
         except Exception:
--- a/ipa-client/man/ipa-client-automount.1
+++ b/ipa-client/man/ipa-client-automount.1
@@ -29,7 +29,7 @@
 .IP  o
 /etc/nsswitch.conf
 .IP  o
-/etc/sysconfig/autofs
+/etc/conf.d/autofs
 .IP  o
 /etc/autofs_ldap_auth.conf
 
@@ -79,7 +79,7 @@
 .TP
 Files that will be configured when using the ldap automount client:
 
-/etc/sysconfig/autofs
+/etc/conf.d/autofs
 
 /etc/autofs_ldap_auth.conf
 
--- a/ipa-client/man/ipa-client-install.1
+++ b/ipa-client/man/ipa-client-install.1
@@ -177,7 +177,7 @@
 Files replaced if NTP is enabled:
 
 /etc/ntp.conf\p
-/etc/sysconfig/ntpd\p
+/etc/conf.d/ntpd.conf\p
 /etc/ntp/step\-tickers\p
 .TP
 Files always created (replacing existing content):
--- a/ipapython/certmonger.py
+++ b/ipapython/certmonger.py
@@ -298,7 +298,7 @@
     If the hostname we were passed to use in ipa-client-install doesn't
     match the value of gethostname() then we need to append
     -k host/HOSTNAME@REALM to the ca helper defined for
-    /usr/libexec/certmonger/ipa-submit.
+    /usr/lib/certmonger/certmonger/ipa-submit.
 
     We also need to restore this on uninstall.
 
--- a/ipapython/platform/base/systemd.py
+++ b/ipapython/platform/base/systemd.py
@@ -27,7 +27,7 @@
 
 class SystemdService(base.PlatformService):
     SYSTEMD_ETC_PATH = "/etc/systemd/system/"
-    SYSTEMD_LIB_PATH = "/lib/systemd/system/"
+    SYSTEMD_LIB_PATH = "/usr/lib/systemd/system/"
     SYSTEMD_SRV_TARGET = "%s.target.wants"
 
     def __init__(self, service_name, systemd_name):
@@ -93,7 +93,7 @@
             ipautil.wait_for_open_ports('localhost', ports, api.env.startup_timeout)
 
     def stop(self, instance_name="", capture_output=True):
-        ipautil.run(["/bin/systemctl", "stop", self.service_instance(instance_name)], capture_output=capture_output)
+        ipautil.run(["/usr/bin/systemctl", "stop", self.service_instance(instance_name)], capture_output=capture_output)
         if 'context' in api.env and api.env.context in ['ipactl', 'installer']:
             update_service_list = True
         else:
@@ -101,7 +101,7 @@
         super(SystemdService, self).stop(instance_name,update_service_list=update_service_list)
 
     def start(self, instance_name="", capture_output=True, wait=True):
-        ipautil.run(["/bin/systemctl", "start", self.service_instance(instance_name)], capture_output=capture_output)
+        ipautil.run(["/usr/bin/systemctl", "start", self.service_instance(instance_name)], capture_output=capture_output)
         if 'context' in api.env and api.env.context in ['ipactl', 'installer']:
             update_service_list = True
         else:
@@ -113,14 +113,14 @@
     def restart(self, instance_name="", capture_output=True, wait=True):
         # Restart command is broken before systemd-36-3.fc16
         # If you have older systemd version, restart of dependent services will hang systemd indefinetly
-        ipautil.run(["/bin/systemctl", "restart", self.service_instance(instance_name)], capture_output=capture_output)
+        ipautil.run(["/usr/bin/systemctl", "restart", self.service_instance(instance_name)], capture_output=capture_output)
         if wait and self.is_running(instance_name):
             self.__wait_for_open_ports(self.service_instance(instance_name))
 
     def is_running(self, instance_name=""):
         ret = True
         try:
-            (sout, serr, rcode) = ipautil.run(["/bin/systemctl", "is-active", self.service_instance(instance_name)],capture_output=True)
+            (sout, serr, rcode) = ipautil.run(["/usr/bin/systemctl", "is-active", self.service_instance(instance_name)],capture_output=True)
             if rcode != 0:
                 ret = False
         except ipautil.CalledProcessError:
@@ -130,7 +130,7 @@
     def is_installed(self):
         installed = True
         try:
-            (sout,serr,rcode) = ipautil.run(["/bin/systemctl", "list-unit-files", "--full"])
+            (sout,serr,rcode) = ipautil.run(["/usr/bin/systemctl", "list-unit-files", "--full"])
             if rcode != 0:
                 installed = False
             else:
@@ -145,7 +145,7 @@
     def is_enabled(self, instance_name=""):
         enabled = True
         try:
-            (sout,serr,rcode) = ipautil.run(["/bin/systemctl", "is-enabled", self.service_instance(instance_name)])
+            (sout,serr,rcode) = ipautil.run(["/usr/bin/systemctl", "is-enabled", self.service_instance(instance_name)])
             if rcode != 0:
                 enabled = False
         except ipautil.CalledProcessError, e:
@@ -190,7 +190,7 @@
                         # Link exists and it is broken, make new one
                         os.unlink(srv_lnk)
                         os.symlink(self.lib_path, srv_lnk)
-                ipautil.run(["/bin/systemctl", "--system", "daemon-reload"])
+                ipautil.run(["/usr/bin/systemctl", "--system", "daemon-reload"])
             except:
                 pass
         else:
@@ -208,7 +208,7 @@
                 if ipautil.dir_exists(srv_tgt):
                     if os.path.islink(srv_lnk):
                         os.unlink(srv_lnk)
-                ipautil.run(["/bin/systemctl", "--system", "daemon-reload"])
+                ipautil.run(["/usr/bin/systemctl", "--system", "daemon-reload"])
             except:
                 pass
         else:
@@ -216,13 +216,13 @@
 
     def __enable(self, instance_name=""):
         try:
-            ipautil.run(["/bin/systemctl", "enable", self.service_instance(instance_name)])
+            ipautil.run(["/usr/bin/systemctl", "enable", self.service_instance(instance_name)])
         except ipautil.CalledProcessError, e:
             pass
 
     def __disable(self, instance_name=""):
         try:
-            ipautil.run(["/bin/systemctl", "disable", self.service_instance(instance_name)])
+            ipautil.run(["/usr/bin/systemctl", "disable", self.service_instance(instance_name)])
         except ipautil.CalledProcessError, e:
             pass
 
--- a/ipaserver/install/cainstance.py
+++ b/ipaserver/install/cainstance.py
@@ -56,7 +56,7 @@
 from ipaserver.plugins import ldap2
 from ipapython.ipa_log_manager import *
 
-HTTPD_CONFD = "/etc/httpd/conf.d/"
+HTTPD_CONFD = "/etc/httpd/conf/extra/"
 DEFAULT_DSPORT = dogtag.install_constants.DS_PORT
 
 PKI_USER = "pkiuser"
--- a/ipaserver/install/httpinstance.py
+++ b/ipaserver/install/httpinstance.py
@@ -35,8 +35,8 @@
 from ipalib import api
 
 HTTPD_DIR = "/etc/httpd"
-SSL_CONF = HTTPD_DIR + "/conf.d/ssl.conf"
-NSS_CONF = HTTPD_DIR + "/conf.d/nss.conf"
+SSL_CONF = HTTPD_DIR + "/conf/extra/ssl.conf"
+NSS_CONF = HTTPD_DIR + "/conf/extra/nss.conf"
 
 selinux_warning = """
 WARNING: could not set selinux boolean(s) %(var)s to true.  The web
@@ -197,7 +197,7 @@
     def configure_httpd_ccache(self):
         pent = pwd.getpwnam("apache")
         ccache = '/tmp/krb5cc_%d' % pent.pw_uid
-        filepath = '/etc/sysconfig/httpd'
+        filepath = '/etc/conf.d/apache'
         if not os.path.exists(filepath):
             # file doesn't exist; create it with correct ownership & mode
             open(filepath, 'a').close()
@@ -211,17 +211,17 @@
         ipaservices.restore_context(filepath)
 
     def __configure_http(self):
-        target_fname = '/etc/httpd/conf.d/ipa.conf'
+        target_fname = '/etc/httpd/conf/extra/ipa.conf'
         http_txt = ipautil.template_file(ipautil.SHARE_DIR + "ipa.conf", self.sub_dict)
-        self.fstore.backup_file("/etc/httpd/conf.d/ipa.conf")
+        self.fstore.backup_file("/etc/httpd/conf/extra/ipa.conf")
         http_fd = open(target_fname, "w")
         http_fd.write(http_txt)
         http_fd.close()
         os.chmod(target_fname, 0644)
 
-        target_fname = '/etc/httpd/conf.d/ipa-rewrite.conf'
+        target_fname = '/etc/httpd/conf/extra/ipa-rewrite.conf'
         http_txt = ipautil.template_file(ipautil.SHARE_DIR + "ipa-rewrite.conf", self.sub_dict)
-        self.fstore.backup_file("/etc/httpd/conf.d/ipa-rewrite.conf")
+        self.fstore.backup_file("/etc/httpd/conf/extra/ipa-rewrite.conf")
         http_fd = open(target_fname, "w")
         http_fd.write(http_txt)
         http_fd.close()
@@ -249,8 +249,8 @@
 
     def __add_include(self):
         """This should run after __set_mod_nss_port so is already backed up"""
-        if installutils.update_file(NSS_CONF, '</VirtualHost>', 'Include conf.d/ipa-rewrite.conf\n</VirtualHost>') != 0:
-            print "Adding Include conf.d/ipa-rewrite to %s failed." % NSS_CONF
+        if installutils.update_file(NSS_CONF, '</VirtualHost>', 'Include conf/extra/ipa-rewrite.conf\n</VirtualHost>') != 0:
+            print "Adding Include conf/extra/ipa-rewrite to %s failed." % NSS_CONF
 
     def __setup_ssl(self):
         fqdn = self.fqdn
@@ -385,7 +385,7 @@
         if not enabled is None and not enabled:
             self.disable()
 
-        for f in ["/etc/httpd/conf.d/ipa.conf", SSL_CONF, NSS_CONF]:
+        for f in ["/etc/httpd/conf/extra/ipa.conf", SSL_CONF, NSS_CONF]:
             try:
                 self.fstore.restore_file(f)
             except ValueError, error:
@@ -393,9 +393,9 @@
                 pass
 
         # Remove the configuration files we create
-        installutils.remove_file("/etc/httpd/conf.d/ipa-rewrite.conf")
-        installutils.remove_file("/etc/httpd/conf.d/ipa.conf")
-        installutils.remove_file("/etc/httpd/conf.d/ipa-pki-proxy.conf")
+        installutils.remove_file("/etc/httpd/conf/extra/ipa-rewrite.conf")
+        installutils.remove_file("/etc/httpd/conf/extra/ipa.conf")
+        installutils.remove_file("/etc/httpd/conf/extra/ipa-pki-proxy.conf")
 
         for var in ["httpd_can_network_connect", "httpd_manage_ipa"]:
             sebool_state = self.restore_state(var)
--- a/ipaserver/install/ipa_backup.py
+++ b/ipaserver/install/ipa_backup.py
@@ -127,7 +127,7 @@
         '/etc/sysconfig/pki-ca',
         '/etc/sysconfig/pki-tomcat',
         '/etc/sysconfig/dirsrv',
-        '/etc/sysconfig/ntpd',
+        '/etc/conf.d/ntpd.conf',
         '/etc/sysconfig/krb5kdc',
         '/etc/sysconfig/pki/ca/pki-ca',
         '/etc/sysconfig/authconfig',
@@ -141,10 +141,10 @@
         '/etc/security/limits.conf',
         '/etc/httpd/conf/password.conf',
         '/etc/httpd/conf/ipa.keytab',
-        '/etc/httpd/conf.d/ipa-pki-proxy.conf',
-        '/etc/httpd/conf.d/ipa-rewrite.conf',
-        '/etc/httpd/conf.d/nss.conf',
-        '/etc/httpd/conf.d/ipa.conf',
+        '/etc/httpd/conf/extra/ipa-pki-proxy.conf',
+        '/etc/httpd/conf/extra/ipa-rewrite.conf',
+        '/etc/httpd/conf/extra/nss.conf',
+        '/etc/httpd/conf/extra/ipa.conf',
         '/etc/ssh/sshd_config',
         '/etc/ssh/ssh_config',
         '/etc/krb5.conf',
--- a/ipaserver/install/ntpinstance.py
+++ b/ipaserver/install/ntpinstance.py
@@ -35,7 +35,7 @@
     def __write_config(self):
 
         self.fstore.backup_file("/etc/ntp.conf")
-        self.fstore.backup_file("/etc/sysconfig/ntpd")
+        self.fstore.backup_file("/etc/conf.d/ntpd.conf")
 
         # We use the OS variable to point it towards either the rhel
         # or fedora pools. Other distros should be added in the future
@@ -99,7 +99,7 @@
         #read in memory, find OPTIONS, check/change it, then overwrite file
         needopts = [ {'val':'-x', 'need':True},
                      {'val':'-g', 'need':True} ]
-        fd = open("/etc/sysconfig/ntpd", "r")
+        fd = open("/etc/conf.d/ntpd.conf", "r")
         lines = fd.readlines()
         fd.close()
         for line in lines:
@@ -118,7 +118,7 @@
 
         done = False
         if newopts:
-            fd = open("/etc/sysconfig/ntpd", "w")
+            fd = open("/etc/conf.d/ntpd.conf", "w")
             for line in lines:
                 if not done:
                     sline = line.strip()
